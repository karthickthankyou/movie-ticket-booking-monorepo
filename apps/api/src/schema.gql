# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  uid: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  bookings: [Booking!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type AggregateCountOutput {
  count: Int!
}

type BatchPayload {
  count: Int!
}

type Booking {
  ticketId: Int!
  row: Int!
  column: Int!
  screenId: Int!
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: String!
  showtimeId: Int!
  user: User!
  showtime: Showtime!
  seat: Seat!
}

type Manager {
  uid: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  cinemaId: Int!
  cinema: Cinema!
}

type Cinema {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  address: Address!
  managers: [Manager!]!
  screens: [Screen!]!
}

type Address {
  lat: Float
  lng: Float
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  cinemaId: Int!
  address: String!
}

type Screen {
  projectionType: ProjectionType!
  soundSystemType: SoundSystemType!
  price: Int!
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  number: Int!
  cinemaId: Int!
  cinema: Cinema!
  seats: [Seat!]!
  seatsCount: Int!
  showtimes: [Showtime!]!
}

"""Enum for screen projection types"""
enum ProjectionType {
  STANDARD
  IMAX
  DOLBY_CINEMA
  RPX
  SCREENX
  PLF
}

"""Enum for sound system types"""
enum SoundSystemType {
  MONO
  STEREO
  DOLBY_DIGITAL
  DOLBY_ATMOS
  DTS
  DTS_X
  SONY_SDDS
  AURO_3D
  IMAX_ENHANCED
}

type Seat {
  createdAt: DateTime!
  updatedAt: DateTime!
  row: Int!
  column: Int!
  screenId: Int!
  booked(showtimeId: Int!): Boolean
  screen: Screen!
  bookings: [Booking!]!
}

type Showtime {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  startTime: DateTime!
  movieId: Int!
  screenId: Int!
  screen: Screen!
  movie: Movie!
  Booking: [Booking!]!
}

type RemainingSeats {
  total: Int!
  booked: Int!
}

type ShowtimeSimple {
  screen: Screen!
  remainingSeats: RemainingSeats!
  id: Int!
  startTime: String!
  movieId: Int!
}

type GroupedShowtime {
  showtimes: [ShowtimeSimple!]!
  date: String!
}

type Movie {
  genre: Genre!
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  director: String!
  duration: Int!
  releaseDate: DateTime!
  posterUrl: String!
  showtimes: [Showtime!]!
}

"""Enum for roles"""
enum Genre {
  ACTION
  ADVENTURE
  ANIMATION
  COMEDY
  CRIME
  DOCUMENTARY
  DRAMA
  FAMILY
  FANTASY
  FILM_NOIR
  HISTORY
  HORROR
  MUSIC
  MYSTERY
  ROMANCE
  SCI_FI
  SHORT
  SPORT
  THRILLER
  WAR
  WESTERN
}

type Ticket {
  id: Int!
  uid: String!
  qrCode: String!
  bookings: [Booking!]!
}

type LoginOutput {
  kind: String!
  localId: String!
  email: String!
  displayName: String!
  idToken: String!
  refreshToken: String!
  expiresIn: String!
}

type RegisterOutput {
  kind: String!
  localId: String!
  email: String!
  displayName: String!
  idToken: String!
  refreshToken: String!
  expiresIn: String!
}

type RefreshTokenOutput {
  access_token: String!
  expires_in: String!
  token_type: String!
  refresh_token: String!
  id_token: String!
  user_id: String!
  project_id: String!
}

type Query {
  users(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): [User!]!
  user(where: UserWhereUniqueInput): User!
  managers(where: ManagerWhereInput, orderBy: [ManagerOrderByWithRelationInput!], cursor: ManagerWhereUniqueInput, take: Int, skip: Int, distinct: [ManagerScalarFieldEnum!]): [Manager!]!
  manager(where: ManagerWhereUniqueInput): Manager!
  cinemas(where: CinemaWhereInput, orderBy: [CinemaOrderByWithRelationInput!], cursor: CinemaWhereUniqueInput, take: Int, skip: Int, distinct: [CinemaScalarFieldEnum!]): [Cinema!]!
  cinema(where: CinemaWhereUniqueInput): Cinema!
  cinemaByManager(uid: String!): Cinema!
  searchCinemas(locationFilter: LocationFilterInput!, where: CinemaWhereInput, orderBy: [CinemaOrderByWithRelationInput!], cursor: CinemaWhereUniqueInput, take: Int, skip: Int, distinct: [CinemaScalarFieldEnum!]): [Cinema!]!
  screens(where: ScreenWhereInput, orderBy: [ScreenOrderByWithRelationInput!], cursor: ScreenWhereUniqueInput, take: Int, skip: Int, distinct: [ScreenScalarFieldEnum!]): [Screen!]!
  screen(where: ScreenWhereUniqueInput): Screen!
  seats(where: SeatWhereInput, orderBy: [SeatOrderByWithRelationInput!], cursor: SeatWhereUniqueInput, take: Int, skip: Int, distinct: [SeatScalarFieldEnum!]): [Seat!]!
  seat(where: SeatWhereUniqueInput): Seat!
  movies(where: MovieWhereInput, orderBy: [MovieOrderByWithRelationInput!], cursor: MovieWhereUniqueInput, take: Int, skip: Int, distinct: [MovieScalarFieldEnum!]): [Movie!]!
  moviesPerCinema(where: MovieWhereInput, orderBy: [MovieOrderByWithRelationInput!], cursor: MovieWhereUniqueInput, take: Int, skip: Int, distinct: [MovieScalarFieldEnum!], cinemaId: Int!): [Movie!]!
  moviesCount(where: MovieWhereInput): AggregateCountOutput!
  movie(where: MovieWhereUniqueInput): Movie!
  showtimes(where: ShowtimeWhereInput, orderBy: [ShowtimeOrderByWithRelationInput!], cursor: ShowtimeWhereUniqueInput, take: Int, skip: Int, distinct: [ShowtimeScalarFieldEnum!]): [Showtime!]!
  showtimesInCinema(cinemaId: Int!, movieId: Int!): [GroupedShowtime!]!
  showtime(where: ShowtimeWhereUniqueInput): Showtime!
  bookedSeatsInShowtime(showtimeId: Int!): RemainingSeats!
  bookings(where: BookingWhereInput, orderBy: [BookingOrderByWithRelationInput!], cursor: BookingWhereUniqueInput, take: Int, skip: Int, distinct: [BookingScalarFieldEnum!]): [Booking!]!
  booking(where: BookingWhereUniqueInput): Booking!
  tickets(where: TicketWhereInput, orderBy: [TicketOrderByWithRelationInput!], cursor: TicketWhereUniqueInput, take: Int, skip: Int, distinct: [TicketScalarFieldEnum!]): [Ticket!]!
  ticket(where: TicketWhereUniqueInput): Ticket!
  ticketsCount(where: TicketWhereInput): AggregateCountOutput!
}

input UserWhereInput {
  tickets: TicketListRelationFilter
  uid: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  bookings: BookingListRelationFilter
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input TicketListRelationFilter {
  every: TicketWhereInput
  some: TicketWhereInput
  none: TicketWhereInput
}

input TicketWhereInput {
  id: IntFilter
  uid: StringFilter
  qrCode: StringFilter
  user: UserRelationFilter
  bookings: BookingListRelationFilter
  AND: [TicketWhereInput!]
  OR: [TicketWhereInput!]
  NOT: [TicketWhereInput!]
}

input IntFilter {
  equals: Int
  in: Int
  notIn: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: Int
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: String
  mode: QueryMode
}

enum QueryMode {
  default
  insensitive
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input BookingListRelationFilter {
  every: BookingWhereInput
  some: BookingWhereInput
  none: BookingWhereInput
}

input BookingWhereInput {
  ticketId: IntFilter
  Ticket: TicketRelationFilter
  row: IntFilter
  column: IntFilter
  screenId: IntFilter
  id: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
  showtimeId: IntFilter
  user: UserRelationFilter
  showtime: ShowtimeRelationFilter
  seat: SeatRelationFilter
  AND: [BookingWhereInput!]
  OR: [BookingWhereInput!]
  NOT: [BookingWhereInput!]
}

input TicketRelationFilter {
  is: TicketWhereInput
  isNot: TicketWhereInput
}

input DateTimeFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
}

input ShowtimeRelationFilter {
  is: ShowtimeWhereInput
  isNot: ShowtimeWhereInput
}

input ShowtimeWhereInput {
  id: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  startTime: DateTimeFilter
  movieId: IntFilter
  screenId: IntFilter
  movie: MovieRelationFilter
  screen: ScreenRelationFilter
  bookings: BookingListRelationFilter
  AND: [ShowtimeWhereInput!]
  OR: [ShowtimeWhereInput!]
  NOT: [ShowtimeWhereInput!]
}

input MovieRelationFilter {
  is: MovieWhereInput
  isNot: MovieWhereInput
}

input MovieWhereInput {
  id: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  title: StringFilter
  director: StringFilter
  genre: EnumGenreFilter
  duration: IntFilter
  releaseDate: DateTimeFilter
  posterUrl: StringFilter
  showtimes: ShowtimeListRelationFilter
  AND: [MovieWhereInput!]
  OR: [MovieWhereInput!]
  NOT: [MovieWhereInput!]
}

input EnumGenreFilter {
  equals: Genre
  in: [Genre!]
  notIn: [Genre!]
  not: Genre
}

input ShowtimeListRelationFilter {
  every: ShowtimeWhereInput
  some: ShowtimeWhereInput
  none: ShowtimeWhereInput
}

input ScreenRelationFilter {
  is: ScreenWhereInput
  isNot: ScreenWhereInput
}

input ScreenWhereInput {
  projectionType: EnumProjectionTypeFilter
  soundSystemType: EnumSoundSystemTypeFilter
  price: FloatFilter
  id: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  number: IntFilter
  cinemaId: IntFilter
  cinema: CinemaRelationFilter
  showtimes: ShowtimeListRelationFilter
  seats: SeatListRelationFilter
  AND: [ScreenWhereInput!]
  OR: [ScreenWhereInput!]
  NOT: [ScreenWhereInput!]
}

input EnumProjectionTypeFilter {
  equals: ProjectionType
  in: [ProjectionType!]
  notIn: [ProjectionType!]
  not: ProjectionType
}

input EnumSoundSystemTypeFilter {
  equals: SoundSystemType
  in: [SoundSystemType!]
  notIn: [SoundSystemType!]
  not: SoundSystemType
}

input FloatFilter {
  equals: Float
  in: Float
  notIn: Float
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: Float
}

input CinemaRelationFilter {
  is: CinemaWhereInput
  isNot: CinemaWhereInput
}

input CinemaWhereInput {
  id: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  screens: ScreenListRelationFilter
  managers: ManagerListRelationFilter
  address: AddressRelationFilter
  AND: [CinemaWhereInput!]
  OR: [CinemaWhereInput!]
  NOT: [CinemaWhereInput!]
}

input ScreenListRelationFilter {
  every: ScreenWhereInput
  some: ScreenWhereInput
  none: ScreenWhereInput
}

input ManagerListRelationFilter {
  every: ManagerWhereInput
  some: ManagerWhereInput
  none: ManagerWhereInput
}

input ManagerWhereInput {
  uid: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  name: StringFilter
  cinemaId: IntFilter
  cinema: CinemaRelationFilter
  AND: [ManagerWhereInput!]
  OR: [ManagerWhereInput!]
  NOT: [ManagerWhereInput!]
}

input AddressRelationFilter {
  is: AddressWhereInput
  isNot: AddressWhereInput
}

input AddressWhereInput {
  id: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  cinemaId: IntFilter
  address: StringFilter
  lat: FloatFilter
  lng: FloatFilter
  cinema: CinemaRelationFilter
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
}

input SeatListRelationFilter {
  every: SeatWhereInput
  some: SeatWhereInput
  none: SeatWhereInput
}

input SeatWhereInput {
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  id: IntFilter
  row: IntFilter
  column: IntFilter
  screenId: IntFilter
  screen: ScreenRelationFilter
  bookings: BookingListRelationFilter
  AND: [SeatWhereInput!]
  OR: [SeatWhereInput!]
  NOT: [SeatWhereInput!]
}

input SeatRelationFilter {
  is: SeatWhereInput
  isNot: SeatWhereInput
}

input UserOrderByWithRelationInput {
  tickets: TicketOrderByRelationAggregateInput
  uid: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
  bookings: BookingOrderByRelationAggregateInput
}

input TicketOrderByRelationAggregateInput {
  _count: SortOrder
}

enum SortOrder {
  asc
  desc
}

input BookingOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserWhereUniqueInput {
  uid: String
}

enum UserScalarFieldEnum {
  uid
  createdAt
  updatedAt
  name
}

input ManagerOrderByWithRelationInput {
  uid: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
  cinemaId: SortOrder
  cinema: CinemaOrderByWithRelationInput
}

input CinemaOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
  screens: ScreenOrderByRelationAggregateInput
  managers: ManagerOrderByRelationAggregateInput
  address: AddressOrderByWithRelationInput
}

input ScreenOrderByRelationAggregateInput {
  _count: SortOrder
}

input ManagerOrderByRelationAggregateInput {
  _count: SortOrder
}

input AddressOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  cinemaId: SortOrder
  address: SortOrder
  lat: SortOrder
  lng: SortOrder
  cinema: CinemaOrderByWithRelationInput
}

input ManagerWhereUniqueInput {
  uid: String
}

enum ManagerScalarFieldEnum {
  uid
  createdAt
  updatedAt
  name
  cinemaId
}

input CinemaWhereUniqueInput {
  id: Int
}

enum CinemaScalarFieldEnum {
  id
  createdAt
  updatedAt
  name
}

input LocationFilterInput {
  ne_lat: Float!
  ne_lng: Float!
  sw_lat: Float!
  sw_lng: Float!
}

input ScreenOrderByWithRelationInput {
  projectionType: SortOrder
  soundSystemType: SortOrder
  price: SortOrder
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  number: SortOrder
  cinemaId: SortOrder
  cinema: CinemaOrderByWithRelationInput
  showtimes: ShowtimeOrderByRelationAggregateInput
  seats: SeatOrderByRelationAggregateInput
}

input ShowtimeOrderByRelationAggregateInput {
  _count: SortOrder
}

input SeatOrderByRelationAggregateInput {
  _count: SortOrder
}

input ScreenWhereUniqueInput {
  id: Int
}

enum ScreenScalarFieldEnum {
  id
  createdAt
  updatedAt
  number
  cinemaId
  projectionType
  soundSystemType
  price
}

input SeatOrderByWithRelationInput {
  createdAt: SortOrder
  updatedAt: SortOrder
  id: SortOrder
  row: SortOrder
  column: SortOrder
  screenId: SortOrder
  screen: ScreenOrderByWithRelationInput
  bookings: BookingOrderByRelationAggregateInput
}

input SeatWhereUniqueInput {
  screenId_row_column: SeatScreenIdRowColumnCompoundUniqueInput!
}

input SeatScreenIdRowColumnCompoundUniqueInput {
  screenId: Int!
  row: Int!
  column: Int!
}

enum SeatScalarFieldEnum {
  row
  column
  screenId
}

input MovieOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  title: SortOrder
  director: SortOrder
  genre: SortOrder
  duration: SortOrder
  releaseDate: SortOrder
  posterUrl: SortOrder
  showtimes: ShowtimeOrderByRelationAggregateInput
}

input MovieWhereUniqueInput {
  id: Int
}

enum MovieScalarFieldEnum {
  id
  createdAt
  updatedAt
  title
  director
  genre
  duration
  releaseDate
  posterUrl
}

input ShowtimeOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  startTime: SortOrder
  movieId: SortOrder
  screenId: SortOrder
  movie: MovieOrderByWithRelationInput
  screen: ScreenOrderByWithRelationInput
  bookings: BookingOrderByRelationAggregateInput
}

input ShowtimeWhereUniqueInput {
  id: Int
}

enum ShowtimeScalarFieldEnum {
  id
  createdAt
  updatedAt
  startTime
  movieId
  screenId
}

input BookingOrderByWithRelationInput {
  ticketId: SortOrder
  Ticket: TicketOrderByWithRelationInput
  row: SortOrder
  column: SortOrder
  screenId: SortOrder
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  showtimeId: SortOrder
  user: UserOrderByWithRelationInput
  showtime: ShowtimeOrderByWithRelationInput
  seat: SeatOrderByWithRelationInput
}

input TicketOrderByWithRelationInput {
  id: SortOrder
  uid: SortOrder
  qrCode: SortOrder
  user: UserOrderByWithRelationInput
  bookings: BookingOrderByRelationAggregateInput
}

input BookingWhereUniqueInput {
  id: Int!
}

enum BookingScalarFieldEnum {
  id
  createdAt
  updatedAt
  userId
  showtimeId
  row
  column
  screenId
  ticketId
}

input TicketWhereUniqueInput {
  id: Int
}

enum TicketScalarFieldEnum {
  id
  uid
  qrCode
}

type Mutation {
  login(credentials: LoginInput!): LoginOutput!
  register(credentials: RegisterInput!): RegisterOutput!
  refreshToken(refreshTokenInput: RefreshTokenInput!): RefreshTokenOutput!
  setRole(setRoleInput: SetRoleInput!): Boolean!
  setAdmin(uid: String!): Boolean!
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(where: UserWhereUniqueInput): User!
  createManager(createManagerInput: CreateManagerInput!): Manager!
  updateManager(updateManagerInput: UpdateManagerInput!): Manager!
  removeManager(where: ManagerWhereUniqueInput): Manager!
  createCinema(createCinemaInput: CreateCinemaInput!): Cinema!
  updateCinema(updateCinemaInput: UpdateCinemaInput!): Cinema!
  removeCinema(where: CinemaWhereUniqueInput): Cinema!
  createScreen(createScreenInput: CreateScreenInput!): Screen!
  updateScreen(updateScreenInput: UpdateScreenInput!): Screen!
  removeScreen(where: ScreenWhereUniqueInput): Screen!
  createSeat(createSeatInput: CreateSeatInput!): Seat!
  removeSeat(where: SeatWhereUniqueInput): Seat!
  createMovie(createMovieInput: CreateMovieInput!): Movie!
  updateMovie(updateMovieInput: UpdateMovieInput!): Movie!
  removeMovie(where: MovieWhereUniqueInput): Movie!
  createShowtime(createShowtimeInput: CreateShowtimeInput!): BatchPayload!
  updateShowtime(updateShowtimeInput: UpdateShowtimeInput!): Showtime!
  removeShowtime(where: ShowtimeWhereUniqueInput): Showtime!
  createBooking(createBookingInput: CreateBookingInput!): Ticket!
  updateBooking(updateBookingInput: UpdateBookingInput!): Booking!
  removeBooking(where: BookingWhereUniqueInput): Booking!
  removeTicket(where: TicketWhereUniqueInput): Ticket!
}

input LoginInput {
  email: String!
  password: String!
}

input RegisterInput {
  email: String!
  password: String!
  displayName: String
}

input RefreshTokenInput {
  refresh_token: String!
}

input SetRoleInput {
  uid: String!
  role: RoleEnum!
}

"""Enum for roles"""
enum RoleEnum {
  admin
  moderator
}

input CreateUserInput {
  uid: String!
  name: String!
}

input UpdateUserInput {
  uid: String!
  name: String
}

input CreateManagerInput {
  uid: String!
  name: String!
  cinemaId: Int!
}

input UpdateManagerInput {
  uid: String!
  name: String
  cinemaId: Int
}

input CreateCinemaInput {
  name: String!
  manager: CreateManagerInputWithoutCinemaId!
  address: CreateAddressInputWithoutCinemaId!
  screens: [CreateScreenInputWithoutCinemaId!]!
}

input CreateManagerInputWithoutCinemaId {
  uid: String!
  name: String!
}

input CreateAddressInputWithoutCinemaId {
  lat: Float
  lng: Float
  address: String!
}

input CreateScreenInputWithoutCinemaId {
  projectionType: ProjectionType!
  soundSystemType: SoundSystemType!
  price: Int!
  number: Int!
  rows: Int!
  columns: Int!
}

input UpdateCinemaInput {
  name: String
  manager: CreateManagerInputWithoutCinemaId
  address: CreateAddressInputWithoutCinemaId
  screens: [CreateScreenInputWithoutCinemaId!]
  id: Int!
}

input CreateScreenInput {
  projectionType: ProjectionType!
  soundSystemType: SoundSystemType!
  price: Int!
  number: Int!
  cinemaId: Int!
  rows: Int!
  columns: Int!
}

input UpdateScreenInput {
  projectionType: ProjectionType
  soundSystemType: SoundSystemType
  price: Int
  number: Int
  cinemaId: Int
  rows: Int
  columns: Int
  id: Int!
}

input CreateSeatInput {
  row: Int!
  column: Int!
  screenId: Int!
}

input CreateMovieInput {
  genre: Genre!
  title: String!
  director: String!
  duration: Int!
  releaseDate: DateTime!
  posterUrl: String!
}

input UpdateMovieInput {
  genre: Genre
  title: String
  director: String
  duration: Int
  releaseDate: DateTime
  posterUrl: String
  id: Int!
}

input CreateShowtimeInput {
  movieId: Int!
  screenId: Int!
  showtimes: [String!]!
}

input UpdateShowtimeInput {
  movieId: Int
  screenId: Int
  showtimes: [String!]
  id: Int!
}

input CreateBookingInput {
  screenId: Int!
  userId: String!
  showtimeId: Int!
  seats: [RowColumn!]!
}

input RowColumn {
  row: Int!
  column: Int!
}

input UpdateBookingInput {
  screenId: Int
  userId: String
  showtimeId: Int
  seats: [RowColumn!]
  id: Int!
}